apply plugin: 'com.android.application'
apply plugin: 'newrelic'

repositories {
    mavenCentral()
    maven {
        url "http://maven.geo-solutions.it/"
    }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
}

android {
    compileSdkVersion 22
    buildToolsVersion "22.0.1"

    defaultConfig {
        applicationId "it.geosolutions.android.siigmobile"
        minSdkVersion 11
        targetSdkVersion 22
        versionCode 5
        versionName "1.4"
    }

    productFlavors {
        elaborazionestandard {
            applicationId "it.geosolutions.android.siigmobile"
            versionCode 11
            versionName "1.10"
        }

        valutazionedanno {
            applicationId "it.geosolutions.android.siigmobile.valutazionedanno"
            versionCode 6
            versionName "0.4"
        }
    }

    lintOptions {
        checkReleaseBuilds false
    }

    productFlavors.all { flavor ->
        def NEWRELIC_APPLICATION_TOKEN = getProjectProperty(flavor.name + "NewRelicApplicationToken")
        //println "Newrelic for ${flavor.name} : ${NEWRELIC_APPLICATION_TOKEN}"
        buildConfigField 'String', 'NEWRELIC_APPLICATION_TOKEN', NEWRELIC_APPLICATION_TOKEN
        def propsFile = new File("${project.projectDir}/newrelic.properties")
        def props = new Properties()
        props.setProperty('com.newrelic.application_token', NEWRELIC_APPLICATION_TOKEN)
        props.store(propsFile.newWriter(), null)
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug{
            testCoverageEnabled = true
        }
    }

    packagingOptions{
        exclude 'COPYING'
        exclude 'COPYING.LESSER'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'LICENSE.txt'
    }
}

task copyNativeLibs(type: Copy) {
    from(new File(project(':geopaparazzispatialitelibrary').projectDir, 'libs')) {
        include 'armeabi/libjsqlite.so'
        include 'armeabi-v7a/libjsqlite.so'
        include 'x86/libjsqlite.so'
    }
    into new File(buildDir, 'native-libs')
}
tasks.withType(JavaCompile) { compileTask -> compileTask.dependsOn copyNativeLibs }
clean.dependsOn 'cleanCopyNativeLibs'

tasks.withType(com.android.build.gradle.tasks.PackageApplication) { pkgTask ->
    //pkgTask.jniDir new File(buildDir, 'native-libs')
    pkgTask.jniFolders = new HashSet<File>()
    pkgTask.jniFolders.add(new File(buildDir, 'native-libs'))
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:22.2.0'
    compile 'com.android.support:design:22.2.0'
    compile project(':map')

    //shibboleth response parsing
    compile 'org.jsoup:jsoup:1.7.2'
    //shibboleth http connection
    compile 'com.loopj.android:android-async-http:1.4.9'

    //Retrofit
    compile 'com.squareup.retrofit:retrofit:1.9.0'
    compile 'com.squareup.okhttp:okhttp-urlconnection:2.5.0'
    compile 'com.squareup.okhttp:okhttp:2.5.0'

    compile 'com.newrelic.agent.android:android-agent:5.+'

    compile 'com.shamanland:fab:0.0.8'

    compile 'com.sothree.slidinguppanel:library:3.1.1'

    androidTestCompile 'xmlunit:xmlunit:1.6'
}

def String getProjectProperty(String propertyName)
{
    String propValue = '""'
    if (hasProperty(propertyName))
    {
        propValue = '"' + this.properties[propertyName] + '"'
    }
    return propValue
}